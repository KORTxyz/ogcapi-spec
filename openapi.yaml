openapi: 3.0.2
info:
  title: OGCAPI
  version: 0.0.1
  description: Implemations of OGC API
  contact:
    name: Tino Kastbjerg Stigsen
    email: info@kort.xyz
    url: https://kort.xyz/
  license:
    name: CC-BY 4.0 license
    url: https://creativecommons.org/licenses/by/4.0/
servers:
  - url: https://localhost
tags:
  - name: Capabilities
    description: essential characteristics of this API
    x-displayName: Capabilities
  - name: Features
    description: Items from a collection
    x-displayName: Features
paths:
  /:
    get:
      operationId: getLandingpage
      tags:
        - Capabilities
      summary: get Landingpage
      description: First place a user would normally hit
      parameters:
        - $ref: '#/components/parameters/fCommon'
      responses:
        '200':
          description: Landingpage of the API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/landingpage'
        '400':
          description: >-
            The server cannot or will not process the request due to an apparent
            client error. For example, a query parameter had an incorrect value.
  /conformance:
    get:
      operationId: getConformance
      tags:
        - Capabilities
      summary: conformance declaration
      description: >-
        The URIs of all conformance classes supported by the server. This
        information is provided to support 'generic' clients that want to access
        multiple OGC API implementations - and not 'just' a specific API. For
        clients accessing only a single API, this information is in general not
        relevant and the OpenAPI definition details the required information
        about the API.
      parameters:
        - $ref: '#/components/parameters/fCommon'
      responses:
        '200':
          description: The operation was executed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/confClasses'
        '400':
          description: >-
            The server cannot or will not process the request due to an apparent
            client error. For example, a query parameter had an incorrect value.
  /api:
    get:
      operationId: getAPI
      tags:
        - Capabilities
      summary: get API description
      description: Description of the API.
      parameters:
        - $ref: '#/components/parameters/fCommon'
      responses:
        '200':
          description: The operation was executed successfully.
        '400':
          description: >-
            The server cannot or will not process the request due to an apparent
            client error. For example, a query parameter had an incorrect value.
  /collections:
    get:
      operationId: getCollections
      tags:
        - Capabilities
      summary: get collections
      description: Show an overview of collections available in the dataset.
      parameters:
        - $ref: '#/components/parameters/fCommon'
        - $ref: '#/components/parameters/query'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/bbox'
      responses:
        '200':
          description: Collections in the API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collections'
        '400':
          description: >-
            The server cannot or will not process the request due to an apparent
            client error. For example, a query parameter had an incorrect value.
    post:
      operationId: postCollection
      tags:
        - Capabilities
      summary: upload collections
      description: Upload a collection to the server.
      responses:
        '200':
          description: successfull.
        '400':
          description: >-
            The server cannot or will not process the request due to an apparent
            client error. For example, a query parameter had an incorrect value.
  /collections/{collectionId}:
    get:
      operationId: getCollection
      tags:
        - Capabilities
      summary: get collection metadata
      description: Show details about a collection available in the dataset.
      parameters:
        - $ref: '#/components/parameters/fCommon'
        - $ref: '#/components/parameters/collectionId'
      responses:
        '200':
          description: collections metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
        '400':
          description: >-
            The server cannot or will not process the request due to an apparent
            client error. For example, a query parameter had an incorrect value.
  /collections/{collectionId}/items:
    get:
      operationId: getItems
      tags:
        - Features
      summary: get Items
      description: Fetches features in the collection
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/properties'
      responses:
        '200':
          description: Items
          $ref: '#/components/responses/Features'
    post:
      operationId: postItems
      tags:
        - Features
      summary: post Items
      description: Add features to the collection in the collection
      parameters:
        - $ref: '#/components/parameters/collectionId'
      requestBody:
        description: features to be added as geojson
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/featureCollectionGeoJSON'
      responses:
        '200':
          description: Success
  /collections/{collectionId}/items/{featureId}:
    get:
      operationId: getItem
      tags:
        - Features
      summary: get Item
      description: Fetches a specific feature in the collection
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/featureId'
      responses:
        '200':
          description: Item
          $ref: '#/components/responses/Feature'
  /collections/{collectionId}/schema:
    get:
      operationId: getSchema
      tags:
        - Features
      summary: get Schema
      description: Fetches a schema for collection
      parameters:
        - $ref: '#/components/parameters/collectionId'
      responses:
        '200':
          description: Schema
components:
  parameters:
    fCommon:
      name: f
      in: query
      description: >-
        Select the output format of the response. If no value is provided, the
        standard HTTP rules apply, i.e., the accept header will be used to
        determine the format.
      required: false
      schema:
        type: string
        enum:
          - json
          - html
    query:
      name: q
      in: query
      description: >-
        filter collections based on a string. Query check for match in name,
        description
      required: false
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: >-
        The optional limit parameter limits the number of items that are
        presented in the response document.


        Only items are counted that are on the first level of the collection in
        the response document.

        Nested objects contained within the explicitly requested items shall not
        be counted.
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 999999
        default: 99
      style: form
      explode: false
    offset:
      name: offset
      in: query
      description: >-
        The optional offset parameter offset the number of items that are
        presented in the response document.
      required: false
      schema:
        type: integer
        minimum: 0
        maximum: 999999
        default: 0
    bbox:
      name: bbox[]
      in: query
      description: >-
        Only features that have a geometry that intersects the bounding box are
        selected.

        The bounding box is provided as four or six numbers, depending on
        whether the

        coordinate reference system includes a vertical axis (height or depth):


        * Lower left corner, coordinate axis 1

        * Lower left corner, coordinate axis 2

        * Minimum value, coordinate axis 3 (optional)

        * Upper right corner, coordinate axis 1

        * Upper right corner, coordinate axis 2

        * Maximum value, coordinate axis 3 (optional)


        If the value consists of four numbers, the coordinate reference system
        is

        WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)

        unless a different coordinate reference system is specified in the
        parameter `bbox-crs`.


        If the value consists of six numbers, the coordinate reference system is
        WGS 84 

        longitude/latitude/ellipsoidal height
        (http://www.opengis.net/def/crs/OGC/0/CRS84h)

        unless a different coordinate reference system is specified in the
        parameter `bbox-crs`.


        The query parameter `bbox-crs` is specified in OGC API - Features - Part
        2: Coordinate 

        Reference Systems by Reference.


        For WGS 84 longitude/latitude the values are in most cases the sequence
        of

        minimum longitude, minimum latitude, maximum longitude and maximum
        latitude.

        However, in cases where the box spans the antimeridian the first value

        (west-most box edge) is larger than the third value (east-most box
        edge).


        If the vertical axis is included, the third and the sixth number are the

        bottom and the top of the 3-dimensional bounding box.


        If a feature has multiple spatial geometry properties, it is the
        decision of the

        server whether only a single spatial geometry property is used to
        determine

        the extent or all relevant geometries.
      required: false
      schema:
        type: array
        minItems: 4
        maxItems: 6
        items:
          type: number
      style: form
      explode: false
    collectionId:
      name: collectionId
      in: path
      description: local identifier of a collection
      required: true
      schema:
        type: string
    datetime:
      name: datetime
      in: query
      description: >-
        Either a date-time or an interval, open or closed. Date and time
        expressions

        adhere to RFC 3339. Open intervals are expressed using double-dots.


        Examples:


        * A date-time: "2018-02-12T23:20:50Z"

        * A closed interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"

        * Open intervals: "2018-02-12T00:00:00Z/.." or "../2018-03-18T12:31:12Z"


        Only features that have a temporal property that intersects the value of

        `datetime` are selected.


        If a feature has multiple temporal properties, it is the decision of the

        server whether only a single temporal property is used to determine

        the extent or all relevant temporal properties.
      required: false
      schema:
        type: string
      style: form
      explode: false
    properties:
      name: properties
      in: query
      description: >-
        Only return a subset of properties when every properties of a feature is
        not needed.


        Examples:


        * A single property: "properties=buildingtype"

        * Multiple properties: "properties=buildingtype,height,material"

        * No properties: "properties="


        Properties needs to be part of the feauture else returning an error.
      required: false
      schema:
        type: string
      style: form
      explode: false
    featureId:
      name: featureId
      in: path
      description: local identifier of a feature
      required: true
      schema:
        type: string
  schemas:
    link:
      required:
        - href
        - rel
        - type
      type: object
      properties:
        rel:
          type: string
        type:
          type: string
        title:
          type: string
        href:
          type: string
        templated:
          type: boolean
    landingpage:
      type: object
      required:
        - links
      properties:
        title:
          type: string
          example: Buildings in Bonn
        description:
          type: string
          example: >-
            Access to data about buildings in the city of Bonn via a Web API
            that conforms to the OGC API Features specification.
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
    confClasses:
      type: object
      required:
        - conformsTo
      properties:
        conformsTo:
          type: array
          items:
            type: string
    collection:
      type: object
      required:
        - id
        - links
        - extent
      properties:
        id:
          description: identifier of the collection used, for example, in URIs
          type: string
        title:
          description: human readable title of the collection
          type: string
        description:
          description: a description of the features in the collection
          type: string
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
        extent:
          description: >-
            The extent of the features in the collection. In the Core only
            spatial and temporal extents are specified. Extensions may add
            additional members to represent other extents, for example, thermal
            or pressure ranges.
          type: object
          properties:
            spatial:
              description: The spatial extent of the features in the collection.
              type: object
              properties:
                bbox:
                  description: >-
                    One or more bounding boxes that describe the spatial extent
                    of the dataset. In the Core only a single bounding box is
                    supported. Extensions may support additional areas. If
                    multiple areas are provided, the union of the bounding boxes
                    describes the spatial extent.
                  type: array
                  minItems: 1
                  items:
                    description: >-
                      Each bounding box is provided as four or six numbers,
                      depending on whether the coordinate reference system
                      includes a vertical axis (height or depth):

                      * Lower left corner, coordinate axis 1 * Lower left
                      corner, coordinate axis 2 * Minimum value, coordinate axis
                      3 (optional) * Upper right corner, coordinate axis 1 *
                      Upper right corner, coordinate axis 2 * Maximum value,
                      coordinate axis 3 (optional)

                      The coordinate reference system of the values is WGS 84
                      longitude/latitude
                      (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a
                      different coordinate reference system is specified in
                      `crs`.

                      For WGS 84 longitude/latitude the values are in most cases
                      the sequence of minimum longitude, minimum latitude,
                      maximum longitude and maximum latitude. However, in cases
                      where the box spans the antimeridian the first value
                      (west-most box edge) is larger than the third value
                      (east-most box edge).

                      If the vertical axis is included, the third and the sixth
                      number are the bottom and the top of the 3-dimensional
                      bounding box.

                      If a feature has multiple spatial geometry properties, it
                      is the decision of the server whether only a single
                      spatial geometry property is used to determine the extent
                      or all relevant geometries.
                    type: array
                    minItems: 4
                    maxItems: 6
                    items:
                      type: number
                    example:
                      - -180
                      - -90
                      - 180
                      - 90
                crs:
                  description: >-
                    Coordinate reference system of the coordinates in the
                    spatial extent (property `bbox`). The default reference
                    system is WGS 84 longitude/latitude. In the Core this is the
                    only supported coordinate reference system. Extensions may
                    support additional coordinate reference systems and add
                    additional enum values.
                  type: string
                  enum:
                    - http://www.opengis.net/def/crs/OGC/1.3/CRS84
                  default: http://www.opengis.net/def/crs/OGC/1.3/CRS84
            temporal:
              description: The temporal extent of the features in the collection.
              type: object
              properties:
                interval:
                  description: >-
                    One or more time intervals that describe the temporal extent
                    of the dataset. The value `null` is supported and indicates
                    an open time intervall. In the Core only a single time
                    interval is supported. Extensions may support multiple
                    intervals. If multiple intervals are provided, the union of
                    the intervals describes the temporal extent.
                  type: array
                  minItems: 1
                  items:
                    description: >-
                      Begin and end times of the time interval. The timestamps
                      are in the coordinate reference system specified in `trs`.
                      By default this is the Gregorian calendar.
                    type: array
                    minItems: 2
                    maxItems: 2
                    items:
                      type: string
                      format: date-time
                      nullable: true
                    example:
                      - '2011-11-11T12:22:11Z'
                      - null
                trs:
                  description: >-
                    Coordinate reference system of the coordinates in the
                    temporal extent (property `interval`). The default reference
                    system is the Gregorian calendar. In the Core this is the
                    only supported temporal reference system. Extensions may
                    support additional temporal reference systems and add
                    additional enum values.
                  type: string
                  enum:
                    - http://www.opengis.net/def/uom/ISO-8601/0/Gregorian
                  default: http://www.opengis.net/def/uom/ISO-8601/0/Gregorian
        itemType:
          description: >-
            indicator about the type of the items in the collection (the default
            value is 'feature').
          type: string
          default: feature
        crs:
          description: the list of coordinate reference systems supported by the service
          type: array
          items:
            type: string
          default:
            - http://www.opengis.net/def/crs/OGC/1.3/CRS84
    collections:
      type: object
      required:
        - links
        - collections
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
        collections:
          type: array
          items:
            $ref: '#/components/schemas/collection'
    pointGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          type: array
          minItems: 2
          items:
            type: number
    multipointGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPoint
        coordinates:
          type: array
          items:
            type: array
            minItems: 2
            items:
              type: number
    linestringGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          type: array
          minItems: 2
          items:
            type: array
            minItems: 2
            items:
              type: number
    multilinestringGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiLineString
        coordinates:
          type: array
          items:
            type: array
            minItems: 2
            items:
              type: array
              minItems: 2
              items:
                type: number
    polygonGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          type: array
          items:
            type: array
            minItems: 4
            items:
              type: array
              minItems: 2
              items:
                type: number
    multipolygonGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              minItems: 4
              items:
                type: array
                minItems: 2
                items:
                  type: number
    geometryGeoJSON:
      oneOf:
        - $ref: '#/components/schemas/pointGeoJSON'
        - $ref: '#/components/schemas/multipointGeoJSON'
        - $ref: '#/components/schemas/linestringGeoJSON'
        - $ref: '#/components/schemas/multilinestringGeoJSON'
        - $ref: '#/components/schemas/polygonGeoJSON'
        - $ref: '#/components/schemas/multipolygonGeoJSON'
    featureGeoJSON:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/geometryGeoJSON'
        properties:
          type: object
          nullable: true
          additionalProperties: true
        id:
          oneOf:
            - type: string
            - type: integer
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
    timeStamp:
      description: >-
        This property indicates the time and date when the response was
        generated.
      type: string
      format: date-time
      example: '2017-08-17T08:05:32Z'
    numberMatched:
      description: |-
        The number of features of the feature type that match the selection
        parameters like `bbox`.
      type: integer
      minimum: 0
      example: 127
    numberReturned:
      description: |-
        The number of features in the feature collection.

        A server may omit this information in a response, if the information
        about the number of features is not known or difficult to compute.

        If the value is provided, the value shall be identical to the number
        of items in the "features" array.
      type: integer
      minimum: 0
      example: 10
    featureCollectionGeoJSON:
      type: object
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/featureGeoJSON'
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
        timeStamp:
          $ref: '#/components/schemas/timeStamp'
        numberMatched:
          $ref: '#/components/schemas/numberMatched'
        numberReturned:
          $ref: '#/components/schemas/numberReturned'
  responses:
    Features:
      description: >-
        The response is a document consisting of features in the collection.

        The features included in the response are determined by the server

        based on the query parameters of the request. To support access to

        larger collections without overloading the client, the API supports

        paged access with links to the next page, if more features are selected

        that the page size.


        The `bbox` and `datetime` parameter can be used to select only a

        subset of the features in the collection (the features that are in the

        bounding box or time interval). The `bbox` parameter matches all
        features

        in the collection that are not associated with a location, too. The

        `datetime` parameter matches all features in the collection that are

        not associated with a time stamp or interval, too.


        The `limit` parameter may be used to control the subset of the

        selected features that should be returned in the response, the page
        size.

        Each page may include information about the number of selected and

        returned features (`numberMatched` and `numberReturned`) as well as

        links to support paging (link relation `next`).
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/featureCollectionGeoJSON'
          example:
            type: FeatureCollection
            links:
              - href: http://data.example.com/collections/buildings/items.json
                rel: self
                type: application/geo+json
                title: this document
              - href: http://data.example.com/collections/buildings/items.html
                rel: alternate
                type: text/html
                title: this document as HTML
              - href: >-
                  http://data.example.com/collections/buildings/items.json&offset=10&limit=2
                rel: next
                type: application/geo+json
                title: next page
            timeStamp: '2018-04-03T14:52:23Z'
            numberMatched: 123
            numberReturned: 2
            features:
              - type: Feature
                id: '123'
                geometry:
                  type: Point
                  coordinates:
                    - 0
                    - 0
                properties:
                  function: residential
                  floors: '2'
                  lastUpdate: '2015-08-01T12:34:56Z'
              - type: Feature
                id: '132'
                geometry:
                  type: Point
                  coordinates:
                    - 11.234
                    - 54.23
                properties:
                  function: public use
                  floors: '10'
                  lastUpdate: '2013-12-03T10:15:37Z'
    Feature:
      description: |-
        fetch the feature with id `featureId` in the feature collection
        with id `collectionId`
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/featureGeoJSON'
          example:
            type: Feature
            links:
              - href: http://data.example.com/id/building/123
                rel: canonical
                title: canonical URI of the building
              - href: http://data.example.com/collections/buildings/items/123.json
                rel: self
                type: application/geo+json
                title: this document
              - href: http://data.example.com/collections/buildings/items/123.html
                rel: alternate
                type: text/html
                title: this document as HTML
              - href: http://data.example.com/collections/buildings
                rel: collection
                type: application/geo+json
                title: the collection document
            id: '123'
            geometry:
              type: Point
              coordinates:
                - 8.66
                - 15.35
            properties:
              function: residential
              floors: '2'
              lastUpdate: '2015-08-01T12:34:56Z'
x-tagGroups:
  - name: ogcapi-common-1
    tags:
      - Capabilities
    description: Implemations of OGC API
  - name: ogcapi-features-1
    tags:
      - Features
    description: Implemations of OGC API
