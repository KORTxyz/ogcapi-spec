openapi: 3.0.2

info:
  title: OGCAPI
  version: 0.0.1
  description: >
    This document is not an OGC Standard. This document is distributed for
    review and comment. This document is subject to change without notice and
    may not be referred to as an OGC Standard.

    Recipients of this document are invited to submit, with their comments,
    notification of any relevant patent rights of which they are aware and to
    provide supporting documentation.

    # Overview

    This is a draft implementation of [OGC API -
    Styles](https://github.com/opengeospatial/ogcapi-styles) and supports the
    discovery, fetching and mutation of styles.

    The API has been designed to support the following components as consumers:

    * **Visual style editors** create, update and delete styles for datasets
    that are shared by other Web APIs implementing OGC API Features, OGC API
    Coverages or OGC API Tiles;

    * **Web APIs implementing OGC API Maps** fetch styles and render spatial
    data (features or coverages) on the server;

    * **Map clients** fetch styles and render spatial data (features or
    coverages) on the client.

    Feature data is either accessed directly or organised in spatial partitions
    ("vector tiles").

    This API uses the following style-related terms and concepts.

    * **Styles** organize a sequence of rules of symbolizing instructions to be
    applied by a rendering engine on one or more features and/or coverages.

    * **Style encodings** are specifications to express a style as one or more
    files. In Testbed-15 Mapbox Styles, OGC SLD versions 1.0 and 1.1 are used.

    * **Stylesheets** are representations of a style in a style encoding.

    * **Style metadata** is essential information about a style in order to
    support users to discover and select styles for rendering their data and for
    visual style editors to create user interfaces for editing a style.

    Stylesheets often reference external resources, especially symbols and fonts
    to be used in the rendering process.

    Symbols are either managed as a single file for each symbol or they are
    organised in a sprite - all symbols combined in a single bitmap image to
    reduce memory and the number of http requests. Single symbols and sprites
    are supported by this API and they may be stored on this server, for
    example, to avoid issues with cross-origin requests. Of course, existing
    external symbol libraries may also be referenced from stylesheets.

    This API does not support font resources and if you want to reference fonts
    / glyphs from a stylesheet, please reference an existing font library.

    Currently no media types have been registered for Mapbox Styles or OGC SLD.
    Temporary media types in the vnd-branch are used for now.

    For more background information see the [OGC Testbed 15 Portrayal Summary
    Engineering Report](http://docs.opengeospatial.org/per/19-018.html) and the
    Engineering Reports linked from that report.

    The API is consistent with the emerging OGC API family of standards and is
    currently the starting point for a future "OGC API - Styles" standard.

    API components that are used by more than one of the draft API
    specifications are not defined in this document, but are defined in two
    domains on Swaggerhub ([OGC API - Features - Part 1: Core building
    blocks](https://app.swaggerhub.com/domains/cportele/ogcapi-features-1/1.0.0)
    and [draft building
    blocks](https://app.swaggerhub.com/domains/cportele/ogcapi-draft-extensions/1.0.0)).
    These are included by reference.

    This document is also available in
    [GitHub](https://github.com/cportele/t15-opf/blob/master/style-api.yaml).

    # Conformance classes

    The Style API specifies the following conformance classes.

    * **'core'** supports the basic GET operations on `/`, `/conformance`,
    `/styles`, `/styles/{styleId}`, and `/styles/{styleId}/metadata`. Support
    for media type `application/json` as a response to the GET operations on
    `/`, `/conformance`, `/styles`, and `/styles/{styleId}/metadata` is
    required.

    * **'html'** supports `text/html` as a response to the GET operations on
    `/`, `/conformance`, `/styles`, and `/styles/{styleId}/metadata`

    * **'manage-styles'** adds POST/PUT/DELETE/PATCH methods on `/styles`,
    `/styles/{styleId}`, and `/styles/{styleId}/metadata`

    * **'style-validation'** adds the `validate` parameter on POST requests to
    `/styles`

    * **'resources'** adds the basic GET operations on `/resources`, and
    `/resources/{resourceId}`

    * **'manage-resources'** adds POST/PUT/DELETE/PATCH methods on `/resources`,
    and `/resources/{resourceId}`

    * **'mapbox-styles'** supports Mapbox Styles as a style encoding on
    `/styles` and `/styles/{styleId}`

    * **'sld-10'** supports SLD 1.0 as a style encoding on `/styles` and
    `/styles/{styleId}`

    * **'sld-11'** supports SLD 1.1 as a style encoding on `/styles` and
    `/styles/{styleId}`

    # Examples how clients are expected to interact with the API

    A dataset with topographic data according to the TDS specification is
    avaiable via an API that implements the OGC API Features and Tiles
    specification ([landing page of the
    dataset](https://services.interactive-instruments.de/t15/daraa)). The
    dataset covers the region of Daraa, Syria. The URI of the landing page is
    used as `{data}` in the descriptions below.

    In addition, the API also contains a style repository ([landing page of the
    repository](`https://services.interactive-instruments.de/t15/daraa`)). The
    URI of the landing page is used as `{styles}` in the descriptions below.

    In the sample implementation `{data}` and `{styles}` are the same API, but
    that does not have to be the case.

    Roads are included in the data in the collection `TransportationGroundCrv`
    as [features with a property `F_CODE` with a value of
    `AP030`](https://services.interactive-instruments.de/t15/daraa/collections/TransportationGroundCrv/items?F_CODE=AP030).

    ## A visual style editor creating a new style

    A user wants to create a new style for TDS roads using her visual style
    editor. She knows the Daraa dataset and the data access API.

    After creating a new style, selecting the native stylesheet language for the
    style and identifying the `TransportationGroundCrv` collection in the Daraa
    dataset as a sample data source, the visual style editor executes a request
    to `{data}/conformance` of the data access API to determine the API
    capabilities. Note that alternatively also the API definition may be
    inspected, but for a client that supports the OGC API standards in general,
    using the conformance declaration is simpler and, therefore, used in this
    example.

    If the editor supports both styling of GeoJSON features or Mapbox Vector
    Tile data, the editor requires support for at least one of the two following
    sets of conformance classes:

    * `http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core` and
    `http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson`

    or

    * `http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/core`.

    The first one provides access to GeoJSON features via
    `{data}/collections/TransportationGroundCrv/items`, the second one provides
    access to MVT tiles via `{data}/collections/TransportationGroundCrv/tiles`.

    In addition, the visual style editor will look for the following conformance
    classes:

    * `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/queryables`: If this
    conformance class is supported, the visual style editor can specify styling
    rules that make use of feature properties. Otherwise all styling rules will
    apply to all features in each collection.

    * `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/style-links`: If
    this conformance class is supported, the visual style editor will be able to
    create a link from the collection to the newly created style.

    The editor will also request information about the features in the
    collection via a request to `{data}/collections/TransportationGroundCrv`.

    If `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/queryables` is
    supported the queryables are retrieved via a request to
    `{data}/collections/TransportationGroundCrv/queryables`.

    Based on this information, the visual style editor is able to configure its
    user interface and guide the user through the creation of the style for road
    features and visualize the draft style using the Daraa data. Once she has
    finished the style, the style will be published on a Style repository that
    supports the Style API.

    If the user request the use of a Style repository that the editor interacts
    with for the first time, the editor will again inspect the capabilities of
    the repository by fetching the conformance declaration at
    `{styles}/conformance`.

    At least the following conformance classes must be supported in order for
    sharing the new style via the repository.

    * `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/core`

    * `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/json`

    * `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/manage-styles`

    In addition, if the style includes symbols or sprites, the repository also
    has to support the following conformance classes:

    * `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/resources`

    * `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/manage-resources`

    Finally, the repository has to support the native stylesheet language that
    the user has selected for the style definition, i.e. one of:

    * `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/mapbox-styles`

    * `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/sld-10`

    * `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/sld-11`

    The visual style editor will ask the user for her credentials (username and
    password) in the style repository and use the credentials in any of the
    following POST/PUT/PATCH requests.

    If `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/style-validation`
    is supported, the visual style editor can also offer validation of the draft
    style any time during the drafting process using POST requests with the
    draft stylesheet to `{styles}/styles?validate=only`.

    To create the new style either a POST request with the stylesheet to
    `{styles}/styles` or a PUT request to `{styles}/styles/{stylename}` (where
    `{stylename}` is the name of the style specified by the user) is sent.
    `?validate=true` may be added to the request URI to trigger validation in
    this step, too, if the style validation conformance class is supported. If
    PUT is used, the visual style editor should check that no existing style
    `{stylename}` exists.

    After a succesful creation of the style (in case of a POST request, the URI
    of the new style `{styles}/styles/{stylename}` is returned in a HTTP header
    `Location`), the visual style editor will update the style metadata using a
    PUT or PATCH request to `{styles}/styles/{stylename}/metadata`.

    If the data access API supports the conformance class
    `http://www.opengis.net/spec/ogcapi-styles-1/1.0/conf/style-links`, the
    visual style editor will add a link to the new style using a PATCH request
    to `{data}/collections/TransportationGroundCrv`.

    ## A visual style editor updating an existing style

    The process is quite similar to the previous example with the following
    changes:

    * The user will start from an existing style, not with a new style. I.e.,
    the user will open/load the style from the style repository and the editor
    will fetch it from `{styles}/styles/{stylename}` (using the stylesheet
    language of choice) and its metadata from
    `{styles}/styles/{stylename}/metadata`.

    * If the style metadata includes links to sample data (e.g.,
    `{data}/collections/TransportationGroundCrv`), the editor may use that data
    for sample visualizations and perhaps to determine changes to queryables.
    The user may also select other data sources for these purposes.

    * Since an existing style is updated, the style definition will always be
    updated with a PUT request to `{styles}/styles/{stylename}` (no POST request
    to `{styles}/styles`, which would create a new style).

    ## A map client

    A map client that wants to visualize data for features or vector tiles for
    the collection `{data}/collections/TransportationGroundCrv` will look for a
    `styles` member in the response. It will probably select one of the styles
    from the list taking the media types of the supported stylesheets into
    account and provide a capability so that users can change the style. The
    stylesheet returned based on the `href` member of the link will be used to
    render the data.
  contact:
    email: kortxyz@gmail.com

tags:
  - name: Use styles
    description: |-
      Discover and fetch styles
  - name: Manage styles
    description: |-
      Create, update and delete styles; only for style authors
  - name: Fetch resources
    description: |-
      Fetch symbols/sprites
  - name: Manage resources
    description: |-
      Create, update and delete symbols/sprites; only for style authors
      
servers:
  - url: https://localhost

paths:
  /styles:
    $ref: paths/styles.yaml
  /styles/{styleId}:
    $ref: paths/styles_{styleId}.yaml
  /styles/{styleId}/metadata:
    $ref: paths/styles_{styleId}_metadata.yaml
  /collections/{collectionId}/styles:
    $ref: paths/collections_{collectionId}_styles.yaml
  /collections/{collectionId}/styles/{styleId}:
    $ref: paths/collections_{collectionId}_styles_{styleId}.yaml
  /resources:
    $ref: paths/resources.yaml
  /resources/{resourceId}:
    $ref: paths/resources_{resourceId}.yaml

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  